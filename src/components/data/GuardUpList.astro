---
import { Icon } from 'astro-icon/components';
import { Image } from 'astro:assets';
import type { GuardUp, Monster } from '../../types/Monsters';

interface Props {
  guardUpData: GuardUp[];
  monsterData: Monster[];
}

const { guardUpData, monsterData } = Astro.props;

// Combine monster data with guard data
const combinedMonsters = monsterData.map(monster => {
  const guardInfo = guardUpData.find(
    g => g.name.toLowerCase() === monster.name.toLowerCase()
  );
  return {
    ...monster,
    guardUp: guardInfo?.guardUp || null,
    trueUnblockable: guardInfo?.trueUnblockable || null
  };
});
---

<div class="group relative bg-background-dark border border-text/10 rounded-xl md:rounded-3xl overflow-hidden">
  <!-- Hover gradient overlay -->
  <div
    class="absolute inset-0 bg-gradient-to-br from-primary/5 to-transparent opacity-0 
           group-hover:opacity-100 transition-all duration-300"
  >
  </div>

  <div class="p-6 md:p-8">
    <!-- Search Bar -->
    <div class="mb-6">
      <div class="relative">
        <input
          type="text"
          placeholder="Search monsters..."
          class="w-full bg-background-darker border border-text/10 rounded-xl px-4 py-3 pl-12
                 text-text placeholder:text-text/40 focus:outline-none focus:ring-2 
                 focus:ring-primary/20 transition-all duration-300"
          id="monster-search"
        />
        <Icon
          name="mingcute:search-line"
          class="w-6 h-6 text-text/40 absolute left-4 top-1/2 -translate-y-1/2"
        />
      </div>
    </div>

    <!-- Monster Grid -->
    <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4" id="monster-list">
      {
        combinedMonsters.map((monster) => (
          <div 
            class="group/card relative bg-background-dark border border-text/10 rounded-xl 
                   hover:bg-background-darker transition-all duration-300"
            data-monster-name={monster.name.toLowerCase()}
          >
            <div 
              class="absolute inset-0 bg-gradient-to-br from-primary/5 to-transparent 
                     opacity-0 group-hover/card:opacity-100 transition-all duration-300 rounded-xl"
            >
            </div>
            
            <div class="relative z-10">
              <!-- Monster Image & Name Header -->
              <div class="p-4 border-b border-text/10 bg-background-darker/50">
                <div class="flex items-center gap-4">
                  <div class="w-16 h-16 relative">
                    <Image
                      src={monster.image}
                      alt={monster.name}
                      class="w-20 h-20 object-contain absolute -top-2 -left-2"
                    />
                  </div>
                  
                  <div>
                    <h3 class="text-lg font-bold capitalize group-hover/card:text-primary transition-colors">
                      {monster.name.toUpperCase()}
                    </h3>
                    
                    <div class="flex gap-2 mt-2">
                      {monster.guardUp && (
                        <span class="px-2 py-1 rounded-full text-xs bg-primary/10 text-primary 
                                   border border-primary/20">
                          Guard Up
                        </span>
                      )}
                      {monster.trueUnblockable && (
                        <span class="px-2 py-1 rounded-full text-xs bg-error/10 text-error 
                                   border border-error/20">
                          Unblockable
                        </span>
                      )}
                    </div>
                  </div>
                </div>
              </div>

              <!-- Guard Requirements -->
              <div class="p-4">
                {!monster.guardUp && !monster.trueUnblockable && (
                  <div class="text-sm flex items-center gap-2 text-success/90">
                    <Icon name="mingcute:shield-line" class="w-4 h-4" />
                    <span>No special guard requirements</span>
                  </div>
                )}

                {monster.guardUp && (
                  <div class="mb-3">
                    <div class="text-sm text-primary/90 mb-2 flex items-center gap-2">
                      <Icon name="mingcute:shield-line" class="w-4 h-4 " />
                      <span>Requires Guard Up:</span>
                    </div>
                    <ul class="space-y-2">
                      {monster.guardUp.map((move) => (
                        <li class="text-sm text-text/80 flex items-start gap-2">
                          <Icon 
                            name="mingcute:arrow-right-line" 
                            class="w-4 h-4 flex-shrink-0 text-primary" 
                          />
                          <span>{move}</span>
                        </li>
                      ))}
                    </ul>
                  </div>
                )}

                {monster.trueUnblockable && (
                  <div class={monster.guardUp ? 'mt-4' : ''}>
                    <div class="text-sm text-error mb-2 flex items-center gap-2">
                      <Icon name="mingcute:alert-line" class="w-4 h-4" />
                      <span>Cannot be blocked:</span>
                    </div>
                    <ul class="space-y-2">
                      {monster.trueUnblockable.map((move) => (
                        <li class="text-sm text-text/80 flex items-start gap-2">
                          <Icon 
                            name="mingcute:close-line" 
                            class="w-4 h-4 flex-shrink-0 text-error" 
                          />
                          <span>{move}</span>
                        </li>
                      ))}
                    </ul>
                  </div>
                )}
              </div>
            </div>
          </div>
        ))
      }
    </div>
  </div>
</div>

<script>
  // Search functionality
  const searchInput = document.getElementById('monster-search') as HTMLInputElement;
  const monsterList = document.getElementById('monster-list');
  const monsterCards = monsterList?.getElementsByTagName('div');

  searchInput?.addEventListener('input', (e) => {
    const searchTerm = (e.target as HTMLInputElement).value.toLowerCase();
    
    if (monsterCards) {
      Array.from(monsterCards).forEach((card) => {
        if (card.hasAttribute('data-monster-name')) {
          const monsterName = card.getAttribute('data-monster-name');
          const shouldShow = monsterName?.includes(searchTerm);
          if (shouldShow !== undefined) {
            card.style.display = shouldShow ? 'block' : 'none';
          }
        }
      });
    }
  });
</script>

