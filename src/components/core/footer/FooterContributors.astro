---
import { Image } from 'astro:assets';
import type { Contributor } from '../../../types/Contributors';
import type { Game } from '../../../types/Game';

interface Props {
  contributors: Contributor[];
  game: Exclude<Game, null>;
}

const { contributors, game } = Astro.props;

// Filter to only those with contributions for the given game
const filteredContributors = game
  ? contributors.filter((c) => !!c.contributions[game])
  : contributors;

// Duplicate for infinite scroll
const scrollContributors = [
  ...filteredContributors,
  ...filteredContributors,
  ...filteredContributors,
  ...filteredContributors,
];
---

{
  scrollContributors.length > 0 && (
    <div class="w-full overflow-hidden py-4 bg-background-dark/50 relative">
      <div class="contributor-scroll flex gap-8">
        {scrollContributors.map((contributor, index) => (
          <div class="flex items-center gap-2 shrink-0 px-4">
            {contributor.image ? (
              <Image src={contributor.image} alt={contributor.name} class="w-8 h-8 rounded-full" />
            ) : (
              <div class="w-8 h-8 rounded-full bg-text/7 flex items-center justify-center">
                <span class="text-sm">{contributor.name[0]}</span>
              </div>
            )}
            <div class="flex gap-2 items-center">
              <span class="text-sm font-medium">{contributor.name}</span>
              <span class="text-xs text-text/60">â€¢</span>
              <span class="text-xs text-text/60">{contributor.contributions[game]}</span>
            </div>
          </div>
        ))}
      </div>
    </div>
  )
}

<style>
  .contributor-scroll-container {
    width: 100%;
    position: relative;
    overflow: hidden;
  }

  .contributor-scroll {
    display: inline-flex;
    animation: scroll 30s linear infinite;
    position: relative;
    white-space: nowrap;
  }

  @keyframes scroll {
    0% {
      transform: translateX(0);
    }
    100% {
      transform: translateX(calc(-100% / 4));
    }
  }

  .contributor-scroll:hover {
    animation-play-state: paused;
  }
</style>
