---
import { Image } from 'astro:assets';
import { Icon } from 'astro-icon/components';
import GameSelect from './GameSelect.astro';
import Breadcrumbs from './Breadcrumbs.astro';
import MobileDrawer from '../nav/MobileDrawer.astro';
import { BREAKPOINTS, LOGO_DIMENSIONS } from '../../../types/Header';

// Import images with explicit types
import logoSmall from '../../../assets/logo_small.png';
import logoLarge from '../../../assets/logo_large.png';

const { height } = Astro.props;
---

<header
  class:list={['shadow-lg', 'bg-background-darker', 'transition-all', 'duration-300', height]}
  id="main-header"
  transition:persist
>
  <div class="flex items-center h-full p-2">
    {/* Brand section */}
    <a href="/" class="flex items-center space-x-2 mr-8" aria-label="Home">
      <Image
        src={logoSmall}
        alt="J9MH Logo"
        width={LOGO_DIMENSIONS.small.width}
        height={LOGO_DIMENSIONS.small.height}
        class={BREAKPOINTS.mobile}
        loading="eager"
      />
      <Image
        src={logoLarge}
        alt="J9MH Logo"
        width={LOGO_DIMENSIONS.large.width}
        height={LOGO_DIMENSIONS.large.height}
        class={BREAKPOINTS.desktop}
        loading="eager"
      />
    </a>

    {/* Navigation section */}
    <div class="flex items-center flex-1">
      <GameSelect />
      <Breadcrumbs class={BREAKPOINTS.desktop} />
    </div>

    {/* Mobile menu button */}
    <button
      id="open-drawer"
      class:list={[
        BREAKPOINTS.mobile,
        'p-2',
        'text-text',
        'hover:text-text-secondary',
        'transition-colors',
      ]}
      aria-label="Open navigation menu"
    >
      <Icon name="mingcute:menu-fill" size={24} />
    </button>
  </div>

  {/* Mobile navigation drawer */}
  <MobileDrawer />
</header>

<style>
  /* Header glow effect styles */
  .header-glow {
    box-shadow: 0 0 25px rgb(255 255 255 / 0.1);
  }

  /* Disable transitions for users who prefer reduced motion */
  @media (prefers-reduced-motion: reduce) {
    header {
      transition: none;
    }
  }
</style>

<script>
  // Header scroll effect handler
  const handleHeaderScroll = () => {
    const header = document.getElementById('main-header');
    if (!header) return;

    let lastScrollY = window.scrollY;
    let ticking = false;

    const updateHeader = () => {
      const currentScrollY = window.scrollY;

      // Add/remove glow effect based on scroll position
      header.classList.toggle('header-glow', currentScrollY > 0);

      // Update positions
      lastScrollY = currentScrollY;
      ticking = false;
    };

    // Optimized scroll listener using requestAnimationFrame
    window.addEventListener(
      'scroll',
      () => {
        if (!ticking) {
          window.requestAnimationFrame(updateHeader);
          ticking = true;
        }
      },
      { passive: true }
    );
  };

  // Initialize header behavior
  handleHeaderScroll();

  // Handle view transitions
  document.addEventListener('astro:after-swap', handleHeaderScroll);
</script>
