---
import { Games } from '../../../data/games';
import { getGameFromPath } from '../../../utils/game';
import type { Game } from '../../../types/Game';
import Select from '../../input/Select.astro';
import SelectOption from '../../input/SelectOption.astro';

// Get current game from URL
const currentPath = Astro.url.pathname;
const selectedGame = getGameFromPath(currentPath);

// Format game name for display
const formatGameName = (game: Game) => game.name.toUpperCase();
---

<Select transition:persist transition:name="game-select">
  <Fragment slot="selected">
    {selectedGame ? formatGameName(selectedGame) : 'SELECT GAME'}
  </Fragment>

  <SelectOption value="" selected={!selectedGame}> SELECT GAME </SelectOption>
  {
    Games.map((game) => (
      <SelectOption value={game.id} selected={selectedGame?.id === game.id}>
        {formatGameName(game)}
      </SelectOption>
    ))
  }
</Select>

<script>
  import { navigate } from 'astro:transitions/client';
  import { gameStore } from '../../../stores/GameStore';
  import type { GameType } from '../../../types/Game';

  function initializeGameSelect() {
    const handleSelectChange = (e: CustomEvent) => {
      const gameId = e.detail.value as GameType;
      const newPath = gameId ? `/${gameId}` : '/';

      console.log('Navigating to:', newPath); // Debug log
      gameStore.setGame(gameId);
      navigate(newPath);
    };

    // Update the select's visual state based on current path
    function updateSelectState() {
      const pathParts = window.location.pathname.split('/');
      const gameId = pathParts[1] || '';

      const select = document.querySelector('[data-custom-select]');
      const selectedText = select?.querySelector('[data-selected-text]');
      if (selectedText) {
        selectedText.textContent = gameId ? gameId.toUpperCase() : 'SELECT GAME';
      }
      // Update selected state of options
      select?.querySelectorAll('[data-select-option]').forEach((option) => {
        const value = option.getAttribute('data-value');
        option.setAttribute('data-selected', (value === gameId).toString());
        option.setAttribute('aria-selected', (value === gameId).toString());
      });

      // Remove old event listeners before adding new ones
      document.querySelectorAll('[data-custom-select]').forEach((select) => {
        select.removeEventListener('select:change', handleSelectChange as EventListener);
        select.addEventListener('select:change', handleSelectChange as EventListener);
      });
    }
    updateSelectState();
  }

  // Initialize on first load
  initializeGameSelect();

  // Handle view transitions
  document.addEventListener('astro:after-swap', initializeGameSelect);

  // Handle browser navigation
  window.addEventListener('popstate', () => {
    const pathParts = window.location.pathname.split('/');
    const gameId = pathParts[1] || null;
    gameStore.setGame(gameId as GameType);
  });
</script>
