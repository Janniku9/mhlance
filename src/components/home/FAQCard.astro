---
import { Icon } from 'astro-icon/components';

interface Props {
  question: string;
  answer: string;
  link?: string;
  isOpen?: boolean;
}

const { question, answer, link, isOpen = false } = Astro.props;
---

<div
  class="faq-card bg-background-dark border border-text/10 rounded-lg overflow-hidden transition-all duration-300 hover:border-primary/30 hover:shadow-lg"
>
  <button
    class="faq-header w-full flex items-center justify-between p-4 text-left"
    aria-expanded={isOpen ? 'true' : 'false'}
  >
    <h3
      class="text-base md:text-lg font-medium text-text group-hover:text-primary transition-colors"
    >
      {question}
    </h3>
    <span
      class="faq-icon flex items-center justify-center w-8 h-8 rounded-full bg-text/5 text-text/80 transition-all duration-300"
    >
      <Icon name="mingcute:down-line" class="w-5 h-5 transition-transform duration-300" />
    </span>
  </button>

  <div class="faq-content overflow-hidden max-h-0 transition-all duration-300">
    <div class="p-4 pt-0 text-sm md:text-base text-text/80">
      <slot>{answer}</slot>
      {
        link && (
          <a href={link} class="mt-2 block text-primary hover:underline flex items-center gap-1">
            <span>check it out</span>
            <Icon name="mingcute:external-link-line" class="w-4 h-4" />
          </a>
        )
      }
    </div>
  </div>
</div>

<script>
  // Initialize all FAQ cards
  document.addEventListener('DOMContentLoaded', () => {
    const faqCards = document.querySelectorAll('.faq-card');

    faqCards.forEach((card) => {
      const header = card.querySelector('.faq-header');
      const content = card.querySelector('.faq-content') as HTMLElement | null;
      const icon = card.querySelector('.faq-icon svg');

      // Set initial state
      const isOpen = header?.getAttribute('aria-expanded') === 'true';
      if (isOpen && content) {
        content.classList.add('active');
        content.style.maxHeight = content.scrollHeight + 'px';
        icon?.classList.add('rotate-180');
      }

      // Add click event listener
      header?.addEventListener('click', () => {
        const isCurrentlyOpen = header.getAttribute('aria-expanded') === 'true';

        // Toggle state
        header.setAttribute('aria-expanded', isCurrentlyOpen ? 'false' : 'true');

        if (!isCurrentlyOpen && content) {
          content.classList.add('active');
          content.style.maxHeight = content.scrollHeight + 'px';
          icon?.classList.add('rotate-180');
        } else if (content) {
          content.style.maxHeight = '0px';
          icon?.classList.remove('rotate-180');

          // Remove active class after transition ends
          content.addEventListener(
            'transitionend',
            () => {
              if (content instanceof HTMLElement && content.style.maxHeight === '0px') {
                content.classList.remove('active');
              }
            },
            { once: true }
          );
        }
      });
    });
  });
</script>

<style>
  .faq-card {
    margin-bottom: 0.75rem;
  }

  .faq-header:hover .faq-icon {
    background-color: theme('colors.primary.DEFAULT', #7c3aed) / 0.2;
  }

  .faq-header[aria-expanded='true'] .faq-icon {
    background-color: theme('colors.primary.DEFAULT', #7c3aed) / 0.2;
    color: theme('colors.primary.DEFAULT', #7c3aed);
  }

  .faq-content.active {
    border-top: 1px solid rgb(var(--color-text) / 0.1);
  }
</style>
