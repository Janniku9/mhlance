---
import type { Game } from '../../types/Game';
import type { GameNavigation } from '../../types/Navigation';

interface Props {
  gameId: Game;
  currentGame: GameNavigation;
}

const { gameId, currentGame } = Astro.props;

const builds = currentGame.sections.builds.length;
const guides = currentGame.sections.guides.length;
const resources = currentGame.sections.data.length;

const getGameClasses = (gameId: Game) => {
  switch (gameId) {
    case 'world':
      return {
        titleGradient:
          'bg-gradient-to-r from-primary-light via-info-light to-info-darker bg-clip-text text-transparent',
        primaryBtn: 'bg-info hover:bg-info-dark text-white hover:info/25',
        secondaryBtn:
          'border-primary-light text-primary-light hover:bg-primary-light hover:text-white hover:border-primary-light',
        statOne: 'text-primary-light',
        statTwo: 'text-info-light',
        waveColor: '#60a5fa', // info-light color
      };
    case 'rise':
      return {
        titleGradient:
          'bg-gradient-to-r from-primary-light via-amber-500 to-red-500 bg-clip-text text-transparent',
        primaryBtn:
          'bg-secondary hover:bg-secondary-light text-white hover:shadow-secondary-light/25',
        secondaryBtn:
          'border-primary text-primary hover:bg-primary-light hover:text-white hover:border-primary-light',
        statOne: 'text-error',
        statTwo: 'text-secondary',
        waveColor: '#f59e0b', // amber-500 color
      };
    case 'wilds':
      return {
        titleGradient:
          'bg-gradient-to-r from-success-light via-success-dark to-primary bg-clip-text text-transparent',
        primaryBtn: 'bg-success hover:bg-success-dark text-white hover:shadow-success-dark/25',
        secondaryBtn:
          'border-primary-light text-primary-light hover:bg-primary-light hover:text-white hover:border-primary-light',
        statOne: 'text-success-light',
        statTwo: 'text-primary-light',
        waveColor: '#10b981', // success color
      };
    default:
      return {
        titleGradient:
          'bg-gradient-to-r from-violet-500 via-amber-500 to-amber-400 bg-clip-text text-transparent',
        primaryBtn: 'bg-violet-500 hover:bg-violet-600 text-white hover:shadow-violet-500/25',
        secondaryBtn:
          'border-amber-500 text-amber-500 hover:bg-amber-500 hover:text-white hover:border-amber-500',
        statOne: 'text-violet-500',
        statTwo: 'text-amber-500',
        waveColor: '#8b5cf6', // violet-500 color
      };
  }
};

const classes = getGameClasses(gameId);
---

<section class="relative py-16 md:py-20 px-3 md:px-4 md:px-8 pb-32 md:pb-40">
  <div class="relative max-w-7xl mx-auto">
    <div class="grid grid-cols-1 lg:grid-cols-3 gap-10 items-center">
      <!-- Game Info -->
      <div class="lg:col-span-2">
        <div class="flex items-center gap-4 md:gap-8 mb-4 md:mb-8">
          <div class="text-5xl md:text-9xl animate-float">
            {currentGame.emoji}
          </div>
          <div>
            <h1
              class:list={['text-3xl md:text-7xl font-bold mb-2 uppercase', classes.titleGradient]}
            >
              {currentGame.title}
            </h1>
          </div>
        </div>
        <p class="text-md md:text-2xl text-white/80 md:mb-8 leading-relaxed lowercase max-w-3xl">
          {currentGame.gameDescription}
        </p>

        <!-- CTA Buttons -->
        <div class="flex flex-wrap gap-2 md:gap-6 hidden md:flex-row">
          <a
            href={`/${gameId}/builds`}
            class:list={[
              'px-2 md:px-8 py-1 md:py-4 rounded-xl font-bold transition-all duration-300 hover:scale-105 hover:shadow-lg uppercase text-md md:text-lg',
              classes.primaryBtn,
            ]}
          >
            view builds
          </a>
          <a
            href="#video-guides"
            class:list={[
              'px-2 md:px-8 py-1 md:py-4 rounded-xl font-bold transition-all duration-300 hover:scale-105 uppercase text-md md:text-lg border-2',
              classes.secondaryBtn,
            ]}
          >
            watch guides
          </a>
        </div>
      </div>

      <!-- Stats -->
      <div class="grid grid-cols-3 lg:grid-cols-1 gap-6">
        <div class="text-center lg:text-left">
          <div class:list={['text-xl md:text-4xl font-bold', classes.statOne]}>{builds}</div>
          <div class="text-base text-white/60 uppercase">builds</div>
        </div>
        <div class="text-center lg:text-left">
          <div class:list={['text-xl md:text-4xl font-bold', classes.statTwo]}>
            {guides}
          </div>
          <div class="text-base text-white/60 uppercase">guides</div>
        </div>
        <div class="text-center lg:text-left">
          <div class:list={['text-xl md:text-4xl font-bold', classes.statOne]}>
            {resources}
          </div>
          <div class="text-base text-white/60 uppercase">resources</div>
        </div>
      </div>
    </div>
  </div>

  <!-- Wave Divider -->
  <div class="wave-divider">
    <svg
      data-name="Layer 1"
      xmlns="http://www.w3.org/2000/svg"
      viewBox="0 0 1200 120"
      preserveAspectRatio="none"
      class="wave-shape"
    >
      <path
        d="M0,0V46.29c47.79,22.2,103.59,32.17,158,28,70.36-5.37,136.33-33.31,206.8-37.5C438.64,32.43,512.34,53.67,583,72.05c69.27,18,138.3,24.88,209.4,13.08,36.15-6,69.85-17.84,104.45-29.34C989.49,25,1113-14.29,1200,52.47V0Z"
        opacity=".25"></path>
      <path
        d="M0,0V15.81C13,36.92,27.64,56.86,47.69,72.05,99.41,111.27,165,111,224.58,91.58c31.15-10.15,60.09-26.07,89.67-39.8,40.92-19,84.73-46,130.83-49.67,36.26-2.85,70.9,9.42,98.6,31.56,31.77,25.39,62.32,62,103.63,73,40.44,10.79,81.35-6.69,119.13-24.28s75.16-39,116.92-43.05c59.73-5.85,113.28,22.88,168.9,38.84,30.2,8.66,59,6.17,87.09-7.5,22.43-10.89,48-26.93,60.65-49.24V0Z"
        opacity=".5"></path>
      <path
        d="M0,0V5.63C149.93,59,314.09,71.32,475.83,42.57c43-7.64,84.23-20.12,127.61-26.46,59-8.63,112.48,12.24,165.56,35.4C827.93,77.22,886,95.24,951.2,90c86.53-7,172.46-45.71,248.8-84.81V0Z"
      ></path>
    </svg>
  </div>
</section>

<style define:vars={{ waveColor: classes.waveColor }}>
  @keyframes float {
    0%,
    100% {
      transform: translateY(0px);
    }
    50% {
      transform: translateY(-15px);
    }
  }

  .animate-float {
    animation: float 4s ease-in-out infinite;
  }

  /* Wave Divider Styles */
  .wave-divider {
    position: absolute;
    bottom: 0;
    left: 0;
    width: 100%;
    overflow: hidden;
    line-height: 0;
    transform: rotate(180deg);
  }

  .wave-shape {
    position: relative;
    display: block;
    width: calc(100% + 1.3px);
    height: 60px;
  }

  @media (min-width: 768px) {
    .wave-shape {
      height: 100px;
    }
  }

  @media (min-width: 1024px) {
    .wave-shape {
      height: 150px;
    }
  }

  .wave-shape path {
    fill: var(--waveColor);
    fill-opacity: 0.1;
    transition: fill-opacity 0.3s ease;
  }

  /* Create layered effect with different opacities */
  .wave-shape path:nth-child(1) {
    fill-opacity: 0.05;
  }

  .wave-shape path:nth-child(2) {
    fill-opacity: 0.08;
  }

  .wave-shape path:nth-child(3) {
    fill-opacity: 0.1;
  }
</style>
