---
import HomeComponent from './HomeComponent.astro';
interface Props {
  playlistId: string;
  playlistName: string;
  playlistDescription: string;
}
const { playlistId, playlistName, playlistDescription }: Props = Astro.props;
---

<HomeComponent title={playlistName} emoji="ðŸŽ¥">
  <div
    data-playlist-card-auto-hover
    class:list={[
      'group relative bg-background-dark border border-text/10 rounded-xl md:rounded-3xl overflow-hidden',
      'transition-all duration-300 hover:bg-background-darker hover:scale-[1.02]',
      'hover:shadow-2xl hover:shadow-primary/5 animate-fade-in',
    ]}
  >
    <!-- Hover gradient overlay -->
    <div
      class="absolute inset-0 bg-gradient-to-br from-primary/5 to-transparent
              opacity-0 group-hover:opacity-100 transition-all duration-300"
    >
    </div>

    <div class="p-4 sm:p-6 md:p-8">
      <!-- Video Container -->
      <div id="video-container" data-playlist-id={playlistId}>
        <div
          class="relative w-full rounded-lg overflow-hidden bg-background-darker"
          style="padding-top: 56.25%;"
          id="video-frame"
        >
          <!-- Video will be loaded here -->
          <div class="absolute inset-0 flex items-center justify-center">
            <div class="animate-pulse text-text/60">Loading video...</div>
          </div>
        </div>
      </div>

      <!-- Description -->
      {
        playlistDescription && (
          <p class="mt-6 text-sm text-text/80 group-hover:text-text/90 transition-colors">
            {playlistDescription}
          </p>
        )
      }
    </div>
  </div>
</HomeComponent>

<style>
  @keyframes fade-in {
    from {
      opacity: 0;
      transform: translateY(20px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }

  .animate-fade-in {
    animation: fade-in 0.5s ease-out forwards;
  }
</style>

<script>
  // This script runs in the browser
  async function getPlaylistItems(playlistId: string) {
    const YOUTUBE_API_KEY = import.meta.env.PUBLIC_YOUTUBE_API_KEY;

    if (!YOUTUBE_API_KEY) {
      throw new Error('API_KEY_MISSING');
    }

    const response = await fetch(
      `https://www.googleapis.com/youtube/v3/playlistItems?part=snippet&maxResults=50&playlistId=${playlistId}&key=${YOUTUBE_API_KEY}`
    );

    if (!response.ok) {
      const errorData = await response.json();
      if (response.status === 403) {
        throw new Error('API_KEY_INVALID');
      } else if (
        response.status === 404 ||
        errorData?.error?.errors?.[0]?.reason === 'playlistNotFound'
      ) {
        throw new Error('PLAYLIST_NOT_FOUND');
      } else {
        throw new Error(errorData?.error?.message || `API Error: ${response.status}`);
      }
    }

    const data = await response.json();
    return data;
  }

  function extractPlaylistId(url: string) {
    const regex = /[?&]list=([^#\&\?]+)/;
    const match = url.match(regex);
    return match ? match[1] : url;
  }

  async function loadRandomVideo() {
    const container = document.getElementById('video-container');
    const videoFrame = document.getElementById('video-frame');
    if (!container || !videoFrame) return;

    const playlistId = container.dataset.playlistId;
    if (!playlistId) return;

    try {
      const data = await getPlaylistItems(extractPlaylistId(playlistId));

      if (!data.items || data.items.length === 0) {
        throw new Error('PLAYLIST_EMPTY');
      }

      // Seed random with current timestamp
      const seed = Date.now();
      const random = seed % data.items.length;
      const videoId = data.items[random].snippet.resourceId.videoId;

      videoFrame.innerHTML = `
        <iframe
          src="https://www.youtube.com/embed/${videoId}"
          class="absolute top-0 left-0 w-full h-full rounded-lg"
          allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture"
          allowfullscreen
        ></iframe>
      `;
    } catch (error: any) {
      console.error('Error loading video:', error);

      let errorMessage = 'An unexpected error occurred';
      let details = error.message;

      switch (error.message) {
        case 'API_KEY_MISSING':
          errorMessage = 'YouTube API key is missing';
          details = 'Please add PUBLIC_YOUTUBE_API_KEY to your .env file';
          break;
        case 'API_KEY_INVALID':
          errorMessage = 'YouTube API key is invalid';
          details = 'Check your API key in .env and ensure it has YouTube Data API access';
          break;
        case 'PLAYLIST_NOT_FOUND':
          errorMessage = 'Playlist not found';
          details = `The playlist ID "${playlistId}" doesn't exist or is private`;
          break;
        case 'PLAYLIST_EMPTY':
          errorMessage = 'Playlist is empty';
          details = 'This playlist contains no videos';
          break;
      }

      videoFrame.innerHTML = `
        <div class="absolute inset-0 flex items-center justify-center">
          <div class="p-6 bg-warning/20 text-warning rounded-lg">
            <div class="text-sm font-medium mb-1">${errorMessage}</div>
            <div class="text-xs opacity-80">${details}</div>
          </div>
        </div>
      `;
    }
  }

  // Add auto-hover directive
  import autoHoverDirective from '../../directives/auto-hover';
  document.querySelectorAll('[data-playlist-card-auto-hover]').forEach((element) => {
    if (element instanceof HTMLElement) autoHoverDirective(element);
  });

  // Load video when page loads
  loadRandomVideo();
</script>
