---
import { Icon } from 'astro-icon/components';
import type {
  Build,
  ElementType,
  StatusType,
  SharpnessType,
  AugmentType,
} from '../../types/builds/Build';
import { Image } from 'astro:assets';
import {
  getElementEmoji,
  getStatusEmoji,
  getSharpnessColor,
  getAugmentColor,
  getAugmentTooltip,
} from '../../utils/BuildUtils';

interface Props {
  build: Build;
  class?: string;
}

const { build, class: className } = Astro.props;
---

<div
  class:list={[
    'group relative bg-background-dark border border-text/10 rounded-3xl overflow-hidden',
    'transition-all duration-300 hover:bg-background-darker hover:scale-[1.02]',
    'hover:shadow-2xl hover:shadow-primary/5 animate-fade-in',
    className,
  ]}
>
  <div
    class="absolute inset-0 bg-gradient-to-br from-primary/5 to-transparent
              opacity-0 group-hover:opacity-100 transition-all duration-300"
  >
  </div>

  <!-- Header Section with Stats -->
  <div class="p-6 border-b border-text/10">
    <div class="flex flex-col md:flex-row md:items-start md:justify-between gap-6 mb-6">
      <!-- Title -->
      <h3 class="text-xl font-bold group-hover:text-primary transition-colors">
        {build.title}
      </h3>

      <!-- Core Stats Grid -->
      <div class="grid grid-cols-2 md:grid-cols-4 gap-4">
        <div class="stat-block">
          <span class="text-sm text-text/60">EFFECTIVE RAW</span>
          <div class="flex items-center gap-2">
            <div class="w-8 h-8 flex items-center justify-center">‚öîÔ∏è</div>
            <span class="text-lg font-medium">{build.stats.raw}</span>
          </div>
        </div>

        {
          build.stats.element && (
            <div class="stat-block">
              <span class="text-sm text-text/60">
                {build.stats.element.type.toLocaleUpperCase()} ELEMENT{' '}
              </span>
              <div class="flex items-center gap-2">
                <div class="w-8 h-8 flex items-center justify-center">
                  {getElementEmoji(build.stats.element.type)}
                </div>
                <span class="text-lg font-medium">{build.stats.element.value}</span>
              </div>
            </div>
          )
        }

        {
          build.stats.status && (
            <div class="stat-block">
              <span class="text-sm text-text/60">
                {build.stats.status.type.toLocaleUpperCase} STATUS{' '}
              </span>
              <div class="flex items-center gap-2">
                <div class="w-8 h-8 flex items-center justify-center">
                  {getStatusEmoji(build.stats.status.type)}
                </div>
                <span class="text-lg font-medium">{build.stats.status.value}</span>
              </div>
            </div>
          )
        }

        <div class="stat-block">
          <span class="text-sm text-text/60">Average AFFINITY</span>
          <div class="flex items-center gap-2">
            <div class="w-8 h-8 flex items-center justify-center">üéØ</div>
            <span class="text-lg font-medium">{build.stats.affinity.avg}%</span>
          </div>
        </div>
      </div>
    </div>

    <!-- Sharpness Bar -->
    <div class="mb-6">
      <div class="flex items-center justify-between mb-2">
        <span class="text-sm text-text/60">Sharpness</span>
        <span class="text-sm font-medium">{build.stats.sharpness.hits} hits</span>
      </div>
      <div class="h-2 bg-text/10 rounded-full overflow-hidden">
        <div
          class:list={[
            'h-full transition-all duration-300',
            getSharpnessColor(build.stats.sharpness.type),
          ]}
          style={`width: ${(build.stats.sharpness.hits / 100) * 100}%`}
        >
        </div>
      </div>
    </div>

    <!-- Image -->
    {
      build.image && (
        <div class="max-w-2xl mx-auto relative rounded-lg overflow-hidden">
          <Image
            src={build.image}
            alt={build.imageAlt || build.title}
            class="object-contain w-full"
          />
        </div>
      )
    }
  </div>

  <!-- Bottom Section -->
  <div class="relative flex flex-col md:flex-row">
    <!-- Left Side - Description -->
    <div class="flex-1 p-6 md:p-8 border-b md:border-b-0 md:border-r border-text/10">
      {
        build.description &&
          build.description.map((desc: string) => (
            <p class="text-sm text-text/80 mb-4 last:mb-0">{desc}</p>
          ))
      }
    </div>

    <!-- Right Side - Build Configuration -->
    <div class="flex-1 p-6 md:p-8">
      <!-- Augments -->
      {
        build.augments && (
          <div class="mb-6">
            <span class="text-sm text-text/60 block mb-2">Augments</span>
            <div class="flex flex-wrap gap-3">
              {build.augments.map((augment: AugmentType) => (
                <div class="group/augment relative" title={getAugmentTooltip(augment)}>
                  <div class:list={['hexagon', 'w-8 h-8', getAugmentColor(augment)]} />
                  <div class="absolute opacity-0 group-hover/augment:opacity-100 transition-opacity bg-background-darker text-sm text-white p-2 rounded-lg -top-10 left-1/2 -translate-x-1/2 whitespace-nowrap z-10 pointer-events-none">
                    {augment}
                  </div>
                </div>
              ))}
            </div>
          </div>
        )
      }

      <!-- Scroll with Image -->
      {
        build.scroll && (
          <div class="flex items-center gap-3 mb-6">
            <div class="w-8 h-8 relative">
              <Icon name="mingcute:scroll-fill" class="w-full h-full text-primary" />
            </div>
            <span class="text-sm font-medium">{build.scroll} scroll</span>
          </div>
        )
      }

      <!-- Rampage Decorations as Tags -->
      {
        build.rampageDeco && (
          <div class="flex flex-wrap gap-2">
            {Array.isArray(build.rampageDeco) ? (
              build.rampageDeco.map((deco) => (
                <span class="px-3 py-1 rounded-full text-sm bg-primary/20 text-primary">
                  {deco}
                </span>
              ))
            ) : (
              <span class="px-3 py-1 rounded-full text-sm bg-primary/20 text-primary">
                {build.rampageDeco}
              </span>
            )}
          </div>
        )
      }
    </div>
  </div>
</div>

<style>
  .stat-block {
    @apply flex flex-col gap-1;
  }

  .hexagon {
    position: relative;
    clip-path: polygon(50% 0%, 100% 25%, 100% 75%, 50% 100%, 0% 75%, 0% 25%);
    transition: transform 0.2s ease;
  }

  .hexagon:hover {
    transform: scale(1.1);
  }

  @keyframes fade-in {
    from {
      opacity: 0;
      transform: translateY(20px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }

  .animate-fade-in {
    animation: fade-in 0.5s ease-out forwards;
  }
</style>
