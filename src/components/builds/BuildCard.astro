---
import { Icon } from 'astro-icon/components';
import StatBlock from './StatBlock.astro';
import SharpnessBar from './SharpnessBar.astro';

import type { Build, AugmentType } from '../../types/builds/Build';
import { Image } from 'astro:assets';
import {
  getElementEmoji,
  getStatusEmoji,
  getAugmentColor,
  getAugmentTooltip,
  getScrollImage,
} from '../../utils/BuildUtils';

interface Props {
  build: Build;
  class?: string;
}

const { build, class: className } = Astro.props;
---

<div
  class:list={[
    'group relative bg-background-dark border border-text/10 rounded-xl md:rounded-3xl overflow-hidden',
    'transition-all duration-300 hover:bg-background-darker hover:scale-[1.02]',
    'hover:shadow-2xl hover:shadow-primary/5 animate-fade-in',
    className,
  ]}
>
  <!-- Hover gradient overlay -->
  <div
    class="absolute inset-0 bg-gradient-to-br from-primary/5 to-transparent
            opacity-0 group-hover:opacity-100 transition-all duration-300"
  >
  </div>

  <!-- Header Section -->
  <div class="p-2 md:p-6 border-b border-text/10">
    <div class="flex flex-col gap-6">
      <!-- Title and Stats Row -->
      <div class="flex flex-col md:flex-row md:items-start md:justify-between gap-6">
        <!-- Title -->
        <h3 class="text-xl font-bold group-hover:text-primary transition-colors">
          {build.title.toLocaleUpperCase()}
        </h3>
      </div>

      <!-- Image -->
      {
        build.image && (
          <div class="max-w-2xl mx-auto relative rounded-lg overflow-hidden">
            <Image
              src={build.image}
              alt={build.imageAlt || build.title}
              class="object-contain w-full"
            />
          </div>
        )
      }
    </div>
  </div>

  <!-- Bottom Section -->
  <div class="flex flex-col md:flex-row">
    <!-- Right Side - Description -->
    <div
      class="flex-1 order-2 md:order-1 p-6 md:p-8 border-b md:border-b-0 md:border-r border-text/10"
    >
      {
        build.description?.map((desc: string) => (
          <p class="text-sm text-text/80 mb-4 last:mb-0">{desc}</p>
        ))
      }

      {
        build.additionalNotes && (
          <div class="mt-8">
            {Object.entries(build.additionalNotes).map(([key, note]) => (
              <div class="mb-4 last:mb-0">
                <span class="text-sm font-medium text-secondary-light block mb-1 capitalize">
                  {key}
                </span>
                <p class="text-sm text-text/80">{note}</p>
              </div>
            ))}
          </div>
        )
      }
    </div>

    <!-- Left Side - Build Configuration -->
    <!-- Left Side - Build Configuration -->
    <div class="flex-1 order-1 md:order-2 p-6 md:p-8">
      <!-- Stats Section -->
      <div class="flex flex-col gap-6 mb-6">
        <!-- Core Stats Grid -->
        <div class="grid grid-cols-2 md:grid-cols-4 gap-4">
          <StatBlock label="EFFECTIVE RAW" value={build.stats.raw} icon="⚔️" />

          {
            build.stats.element && (
              <StatBlock
                label={`${build.stats.element.type.toLocaleUpperCase()} ELEMENT`}
                value={build.stats.element.value}
                icon={getElementEmoji(build.stats.element.type)}
              />
            )
          }

          {
            build.stats.status && (
              <StatBlock
                label={`${build.stats.status.type.toLocaleUpperCase()} STATUS`}
                value={build.stats.status.value}
                icon={getStatusEmoji(build.stats.status.type)}
              />
            )
          }

          <StatBlock label="AVG AFFINITY" value={`${build.stats.affinity.avg}%`} icon="🎯" />
        </div>
      </div>

      <!-- Sharpness Bar -->
      <SharpnessBar hits={build.stats.sharpness.hits} type={build.stats.sharpness.type} />

      <!-- Augments -->
      {
        build.augments && (
          <div class="mb-6">
            <span class="text-sm text-text/60 block mb-2">AUGMENTS</span>
            <div class="flex flex-wrap gap-1">
              {build.augments.map((augment: AugmentType) => (
                <div class="group/augment relative" title={getAugmentTooltip(augment)}>
                  <div class:list={['hexagon', 'w-8 h-8', getAugmentColor(augment)]} />
                  <div class="absolute opacity-0 group-hover/augment:opacity-100 transition-opacity bg-background-darker text-sm text-white p-2 rounded-lg -top-10 left-1/2 -translate-x-1/2 whitespace-nowrap z-10 pointer-events-none">
                    {augment}
                  </div>
                </div>
              ))}
            </div>
          </div>
        )
      }

      <!-- Scroll with Image -->
      {
        build.scroll && (
          <div class="mb-6">
            <span class="text-sm text-text/60 block mb-2">SCROLL</span>
            <div class="flex items-center gap-3">
              <div class="w-8 h-8 relative">
                <Image
                  src={getScrollImage(build.scroll)}
                  alt={build.scroll}
                  class="w-full h-full"
                />
              </div>
              <span class="text-sm font-medium">{build.scroll.toLocaleLowerCase()} scroll</span>
            </div>
          </div>
        )
      }

      <!-- Rampage Decorations -->
      {
        build.rampageDeco && (
          <div class="mb-6">
            <span class="text-sm text-text/60 block mb-2">RAMPAGE DECORATION</span>
            <div class="flex flex-wrap gap-2">
              {Array.isArray(build.rampageDeco) ? (
                build.rampageDeco.map((deco) => (
                  <span class="px-3 py-1 rounded-full text-sm bg-primary/20 text-primary">
                    {deco}
                  </span>
                ))
              ) : (
                <span class="px-3 py-1 rounded-full text-sm bg-primary/20 text-primary">
                  {build.rampageDeco}
                </span>
              )}
            </div>
          </div>
        )
      }
    </div>
  </div>
</div>

<style>
  .hexagon {
    position: relative;
    clip-path: polygon(50% 0%, 100% 25%, 100% 75%, 50% 100%, 0% 75%, 0% 25%);
    transition: transform 0.2s ease;
  }

  .hexagon:hover {
    transform: scale(1.1);
  }

  @keyframes fade-in {
    from {
      opacity: 0;
      transform: translateY(20px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }

  .animate-fade-in {
    animation: fade-in 0.5s ease-out forwards;
  }
</style>
