---
interface Props {
  class?: string;
  hoverable?: boolean;
  scaled?: boolean;
  dataAttribute?: string;
  href?: string;
  disabled?: boolean;
  noTopRounding?: boolean;
}

const {
  class: className,
  hoverable = true,
  scaled = true,
  dataAttribute,
  href,
  disabled = false,
  noTopRounding = false,
} = Astro.props;

const Component = href ? 'a' : 'div';
const linkProps = href ? { href: disabled ? '#' : href } : {};
---

<Component
  {...linkProps}
  {...dataAttribute ? { [dataAttribute]: '' } : {}}
  class:list={[
    'group relative bg-background-dark',
    noTopRounding ? '' : 'border border-text/15 overflow-hidden',
    'transition-all duration-300',
    noTopRounding ? 'rounded-b-2xl md:rounded-b-3xl' : 'rounded-2xl md:rounded-3xl',
    hoverable && !disabled && 'hover:bg-background-darker',
    scaled && !disabled && 'hover:scale-[1.02]',
    hoverable && !disabled && 'hover:shadow-2xl hover:shadow-primary/5',
    'animate-fade-in',
    href && 'block',
    disabled && 'cursor-not-allowed opacity-80',
    className,
  ]}
>
  <!-- Hover gradient overlay -->
  {
    hoverable && !disabled && (
      <div
        class="absolute inset-0 bg-gradient-to-br from-primary/10 to-transparent
              opacity-0 group-hover:opacity-100 transition-all duration-300"
      />
    )
  }

  <slot />
</Component>

<style>
  @keyframes fade-in {
    from {
      opacity: 0;
      transform: translateY(20px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }

  .animate-fade-in {
    animation: fade-in 0.5s ease-out forwards;
  }
</style>
