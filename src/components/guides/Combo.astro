---
import { Icon } from 'astro-icon/components';
import ComboStatBlock from './ComboStatBlock.astro';
import type { Combo, PlaystationKey, XboxKey, PCKey } from '../../types/guides/Combo';
import { getButtonClass, getButtonEmoji, getComboTagColor } from '../../utils/ComboUtils';

interface Props {
  combo: Combo;
  class?: string;
}

const { combo, class: className } = Astro.props;

// Calculate per-second values
const rawPerSecond = combo.stats.motionValue / combo.stats.duration;
const elementPerSecond = combo.stats.elementModifier / combo.stats.duration;
const sharpnessPerSecond = combo.stats.sharpnessCost / combo.stats.duration;
---

<div
  class:list={[
    'group relative bg-background-dark border border-text/10 rounded-xl md:rounded-3xl overflow-hidden',
    'transition-all duration-300 hover:bg-background-darker',
    'hover:shadow-2xl hover:shadow-primary/5',
    className,
  ]}
>
  <!-- Hover gradient overlay -->
  <div
    class="absolute inset-0 bg-gradient-to-br from-primary/5 to-transparent
            opacity-0 group-hover:opacity-100 transition-all duration-300"
  >
  </div>

  <div class="grid grid-cols-1 md:grid-cols-2">
    <!-- Left Column - GIF and Stats -->
    <div class="p-6 md:p-8 border-b md:border-b-0 md:border-r border-text/10 bg-secondary/5">
      <!-- GIF -->
      {
        combo.gif && (
          <div class="relative rounded-lg overflow-hidden mb-6">
            <iframe src={combo.gif} class="w-full aspect-video" frameborder="0" allowfullscreen />
          </div>
        )
      }

      <!-- Stats Grid -->
      <div class="grid grid-cols-2 gap-6">
        <ComboStatBlock
          label="MOTION VALUE"
          value={combo.stats.motionValue}
          perSecond={rawPerSecond}
          icon="⚔️"
          valueColor="text-primary"
        />
        <ComboStatBlock
          label="ELEMENT MOD"
          value={combo.stats.elementModifier}
          perSecond={elementPerSecond}
          icon="⚡"
          perSecondUnit="/s"
        />
        <ComboStatBlock
          label="SHARPNESS"
          value={combo.stats.sharpnessCost}
          perSecond={sharpnessPerSecond}
          icon="🗡️"
        />
        <ComboStatBlock
          label="DURATION"
          value={combo.stats.duration}
          perSecond={1}
          icon="⏱️"
          perSecondUnit="s"
        />
      </div>
    </div>

    <!-- Right Column (same as before) -->
    <div class="p-6 md:p-8">
      <h3 class="text-xl font-bold mb-4 group-hover:text-primary transition-colors">
        {combo.longTitle}
      </h3>

      <!-- Tags -->
      <div class="flex flex-wrap gap-2 mb-6">
        {
          combo.tags.map((tag) => (
            <span class:list={['px-3 py-1 rounded-full text-sm', getComboTagColor(tag)]}>
              {tag}
            </span>
          ))
        }
      </div>

      <!-- Strengths -->
      <div class="mb-6">
        <span class="text-sm text-text/60 block mb-2">STRENGTHS</span>
        <ul class="space-y-2">
          {
            combo.strengths.map((strength) => (
              <li class="text-sm text-text/80 flex items-start gap-2">
                <Icon name="mingcute:plus-fill" class="w-4 h-4 text-primary flex-shrink-0" />
                {strength}
              </li>
            ))
          }
        </ul>
      </div>

      <!-- Considerations -->
      {
        combo.considerations && (
          <div class="mb-6">
            <span class="text-sm text-text/60 block mb-2">CONSIDERATIONS</span>
            <ul class="space-y-2">
              {combo.considerations.map((consideration) => (
                <li class="text-sm text-text/80 flex items-start gap-2">
                  <Icon
                    name="mingcute:minimize-fill"
                    class="w-4 h-4 text-secondary flex-shrink-0"
                  />
                  {consideration}
                </li>
              ))}
            </ul>
          </div>
        )
      }

      <!-- Inputs -->
      {
        combo.inputs && (
          <div>
            <span class="text-sm text-text/60 block mb-2">INPUTS</span>
            <div class="space-y-4">
              <div class="space-y-2">
                <span class="text-sm text-text/60">PlayStation</span>
                <div class="flex flex-wrap gap-4">
                  {combo.inputs.PlaystationInput.map((sequence, i) => (
                    <div class="flex items-center gap-2">
                      {sequence.map((button, j) => (
                        <>
                          <div class={getButtonClass(button, 'playstation')}>
                            {getButtonEmoji(button, 'playstation')}
                          </div>
                          {j < sequence.length - 1 && <div class="text-text/60">+</div>}
                        </>
                      ))}
                      {i < (combo.inputs?.PlaystationInput.length ?? 0) - 1 && (
                        <div class="text-text/60 ml-1">→</div>
                      )}
                    </div>
                  ))}
                </div>
              </div>

              <div class="space-y-2">
                <span class="text-sm text-text/60">Xbox</span>
                <div class="flex flex-wrap gap-4">
                  {combo.inputs.XboxInput.map((sequence, i) => (
                    <div class="flex items-center gap-2">
                      {sequence.map((button, j) => (
                        <>
                          <div class={getButtonClass(button, 'xbox')}>
                            {getButtonEmoji(button, 'xbox')}
                          </div>
                          {j < sequence.length - 1 && <div class="text-text/60">+</div>}
                        </>
                      ))}
                      {i < (combo.inputs?.XboxInput.length ?? 0) - 1 && (
                        <div class="text-text/60 ml-1">→</div>
                      )}
                    </div>
                  ))}
                </div>
              </div>

              <div class="space-y-2">
                <span class="text-sm text-text/60">PC</span>
                <div class="flex flex-wrap gap-4">
                  {combo.inputs.PCInput.map((sequence, i) => (
                    <div class="flex items-center gap-2">
                      {sequence.map((button, j) => (
                        <>
                          <div class={getButtonClass(button, 'pc')}>
                            {getButtonEmoji(button, 'pc')}
                          </div>
                          {j < sequence.length - 1 && <div class="text-text/60">+</div>}
                        </>
                      ))}
                      {i < (combo.inputs?.PCInput.length ?? 0) - 1 && (
                        <div class="text-text/60 ml-1">→</div>
                      )}
                    </div>
                  ))}
                </div>
              </div>

              <p class="text-sm text-text/60">{combo.inputs.notes}</p>
            </div>
          </div>
        )
      }
    </div>
  </div>
</div>
