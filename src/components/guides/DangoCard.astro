---
interface DangoSkill {
  text: string;
  emoji: string;
}

interface Props {
  title: string;
  description: string;
  dangos: {
    lvl4?: DangoSkill;
    lvl3?: DangoSkill;
    lvl2?: DangoSkill;
    lvl1?: DangoSkill;
  };
  class?: string;
}

const { title, description, dangos, class: className } = Astro.props;
---

<div
  class:list={[
    'group relative bg-background-dark border border-text/10 rounded-xl md:rounded-3xl overflow-hidden',
    'transition-all duration-300 hover:bg-background-darker hover:scale-[1.02]',
    'hover:shadow-2xl hover:shadow-primary/5 animate-fade-in',
    className,
  ]}
>
  <!-- Hover gradient overlay -->
  <div
    class="absolute inset-0 bg-gradient-to-br from-primary/5 to-transparent
            opacity-0 group-hover:opacity-100 transition-all duration-300"
  >
  </div>

  <div class="p-6 md:p-8 h-full flex flex-col">
    <!-- Header -->
    <h3 class="text-xl font-bold mb-4 group-hover:text-primary transition-colors">
      {title}
    </h3>

    <!-- Description -->
    <p class="text-sm text-text/80 mb-6">
      {description}
    </p>

    <!-- Dango Skills -->
    <div class="space-y-4 mt-auto">
      {
        [4, 3, 2, 1].map((level) => {
          const skill = dangos[`lvl${level}` as keyof typeof dangos];
          if (!skill) return null;

          return (
            <div class="flex items-center gap-3">
              <span class="text-sm font-medium text-text/60">Level {level}</span>
              <div class="flex-1 flex items-center gap-2 px-3 py-2 rounded-lg bg-text/5">
                <span class="text-xl">{skill.emoji}</span>
                <span class="text-sm font-medium">{skill.text}</span>
              </div>
            </div>
          );
        })
      }
    </div>
  </div>
</div>

<style>
  @keyframes fade-in {
    from {
      opacity: 0;
      transform: translateY(20px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }

  .animate-fade-in {
    animation: fade-in 0.5s ease-out forwards;
  }
</style>
